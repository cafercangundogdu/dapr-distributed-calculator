name: dapr-distributed-calculator
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Build docker image
        run: | 
          REGISTRY=${{ env.ACRSERVER }} make build
      - uses: azure/docker-login@v1
        name: Docker login
        with:
          login-server: ${{ env.ACRSERVER }}
          username: ${{ secrets.ACRID }}
          password: ${{ secrets.ACRSECRET }} 
      - name: Push docker image
        if: github.event_name != 'pull_request'
        run: |
          REGISTRY=${{ env.ACRSERVER }} make push
    env:
      ACRSERVER: ${{ secrets.ACRNAME }}.azurecr.io
  code-scanning:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        # Override language selection by uncommenting this and choosing your languages
        # with:
        #   languages: go, javascript, csharp, python, cpp, java

      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö https://git.io/JvXDl

      # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following
      #    three lines and modify them (or add more) to build your code if your
      #    project uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
  deploy:
    needs: code-scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZCREDENTIALS }}'
          cluster-name: ${{ secrets.AKSNAME }}
          resource-group: ${{ secrets.AKSRG }}
      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.ACRNAME }}
          container-registry-password: ${{ secrets.ACRSECRET }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          force: true
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/deployment.yml
            manifests/service.yml
          images: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
